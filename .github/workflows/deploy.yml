name: Deploy Portfolio to Server with Docker

on:
  push:
    branches: [ main ]

env:
  # ${{ github.repository_owner }}
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/portfolio-site 

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-server:
    name: Deploy to Server
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Logging into GHCR on server (needed to pull packages)..."
            echo "${{ secrets.GH_PAT }}" | sudo docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            echo "Pulling latest image: ${{ env.IMAGE_NAME }}:latest"
            sudo docker pull ${{ env.IMAGE_NAME }}:latest

            echo "Stopping current portfolio container (if it exists)..."
            sudo docker stop site-danciguer || true
            echo "Removing current portfolio container (if it exists)..."
            sudo docker rm site-danciguer || true

            echo "Starting new portfolio container..."
            sudo docker run -d \
              --name site-danciguer \
              -p 8082:3000 \
              --restart unless-stopped \
              ${{ env.IMAGE_NAME }}:latest

            echo "Cleaning up old Docker images..."
            sudo docker image prune -af
            
            echo "Deployment complete!"